#include <iostream>using namespace std;class ListNode{public:    ListNode(const int value):data(value), nextPtr(NULL){    }	int data;	ListNode *nextPtr;}; class circularLinkedList{public: 	circularLinkedList(int count, int step):count(count), step(step)	{		creatList();		deleteListNode();	}protected:	void creatList();	void deleteListNode();private:	ListNode* headPtr; //	head of listnode	ListNode* lastPtr; //	end of listnode	int count;           //	sum of listnode	int step; 		   //	step of removing};void circularLinkedList::creatList(){	headPtr = new ListNode(1);	    //	create the first listnode	lastPtr = headPtr;	for (int i = 2; i <= count; ++i)	//	create the other listnode	{		ListNode* newListNodePtr = new ListNode(i);		lastPtr->nextPtr = newListNodePtr;		lastPtr = newListNodePtr;	}	lastPtr->nextPtr = headPtr;	    //	create circuit}void circularLinkedList::deleteListNode(){	//	reach the people before the start people	ListNode* nextListNode = lastPtr;	//	start with the last people	while (count > 1)	{		//	reach the people before the removed people		for (int i = 1; i <= step - 1; ++i)		{			nextListNode = nextListNode->nextPtr;		}		//	delete the listnode		ListNode* removedPtr = nextListNode->nextPtr;			nextListNode->nextPtr = removedPtr->nextPtr;		delete removedPtr;		count--;	}	cout << nextListNode->data << endl;}int main(int argc, char const *argv[]){	int t, M, N;	cin >> t;	while (t--)	{		cin >> N >> M;		circularLinkedList cll(N, M);	}	return 0;}
/*--------------------------------------Homework 041002. DateUse OOP to solve the problemCreated by Sublime Text 2Copyright (c) 2015. All rights reserved.---------------------------------------*//****************need not submit***********#include <iostream>#include <string>#include <iomanip>using namespace std;class Date {public:    Date();    Date(const Date&);    Date(const string&);    Date(int, int = 2, int = 29);    void setDate(const string&);    void printDate() const;	int getYear() const;    int getMonth() const;    int getDay() const;private:    bool checkFormat(const string&) const;    bool validate();    int year, month, day;    bool pass;};**************************************/bool Date::validate(){	if (year < 0 || year > 9999)	//	judge the year	{		return false;	}	else if ( month == 2 )	//	judge February	{		if ( (( year%4 == 0 && year%100 != 0 ) || year % 400 == 0 ) && 1 <= day && day <= 29)			return true;		else if (1 <= day && day <= 28 )			return true;		else			return false;    }	else if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)	{		if ( 1 <= day && day <= 31 )			return true;		else			return false;	}	else if (month == 4 || month == 6 || month == 9 || month == 11)	{		if ( 1 <= day && day <= 30 )			return true;		else			return false;    }    else	//	if month < 1 or month > 12 		return false;}Date::Date(){	year = 2006;	month = 1;	year = 1;	pass = validate();}Date::Date(const Date& newDate){	year = newDate.getYear();	month = newDate.getMonth();	day =  newDate.getDay();	pass = validate();}Date::Date(const string& str){	setDate(str);}Date::Date(int y, int m, int d){	year = y;	month = m;	day = d;	pass = validate();}bool Date::checkFormat(const string& str) const{	for (int i = 0; i < str.size(); ++i)	{		if (i == 4 || i == 7)	//	judge character ':'		{			if (str[i] != ':')				return false;		}		else		{			if (str[i] < '0' || '9' < str[i])	//	judge number				return false;		}	}	return true;}void Date::setDate(const string& str){	if (checkFormat(str))	//	judge format	{		//	set year		int base = 1;		year = 0;		for (int i = 3; i >= 0; --i)		{			 year += (str[i] - '0') * base;			 base *= 10;		}		//	set month		month = (str[5] - '0') * 10 + (str[6] - '0');		//	set day		day = (str[8] - '0') * 10 + (str[9] - '0');		pass = validate();	}	else	//	invalid format		pass = false;}void Date::printDate() const{	if (pass)	{		cout << setw(4) << setfill('0') << year                  //	YYYY			 << '-' << setw(2) << setfill('0') << month          // -MM			 << '-' << setw(2) << setfill('0') << day << endl;   // -DD	}	else		cout << "Invalid Date\n";}int Date::getYear() const{	return year;}int Date::getMonth() const{	return month;}int Date::getDay() const{	return day;}/*****test function*************int main() {	int T;	int flag;	Date* myDate;		string dateString;	int year, month, day;		cin >> T;	while (T--) {		cin >> flag;		if (flag == 1) {			cin >> dateString;			myDate = new Date(dateString);					}		else if (flag == 2) {			cin >> year;			myDate = new Date(year);		}		else if (flag == 3) {			cin >> year >> month;			myDate = new Date(year, month);		}		else if (flag == 4) {			cin >> year >> month >> day;			myDate = new Date(year, month, day);		} 		myDate->printDate();	}		return 0;}************************************/
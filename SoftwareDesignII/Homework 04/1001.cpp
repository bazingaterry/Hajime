/*--------------------------------------Homework 041001. Josephus ProblemUse listnode to solve Josephus problemCreated by Sublime Text 2Copyright (c) 2015. All rights reserved.---------------------------------------*/#include <iostream>using namespace std;class ListNode{public:    ListNode(const int value):data(value), nextPtr(NULL){    }	int data;	ListNode *nextPtr;}; class Josephus{public: 	Josephus(int all, int start, int step):all(all), start(start), step(step)	{		creatListNode();		outputListNode();	}protected:	void creatListNode();	void outputListNode();private:	ListNode* headPtr; //	head of listnode	ListNode* lastPtr; //	end of listnode	int all;           //	sum of listnode	int start; 		   //	the first people	int step; 		   //	step of removing};void Josephus::creatListNode(){	headPtr = new ListNode(1);	    //	create the first listnode	lastPtr = headPtr;	for (int i = 2; i <= all; ++i)	//	create the other listnode	{		ListNode* newListNodePtr = new ListNode(i);		lastPtr->nextPtr = newListNodePtr;		lastPtr = newListNodePtr;	}	lastPtr->nextPtr = headPtr;	    //	create circuit}void Josephus::outputListNode(){	//	reach the people before the start people	ListNode* nextListNode = lastPtr;	//	start with the last people	for (int i = 1; i <= start - 1; ++i)	{		nextListNode = nextListNode->nextPtr;	}	while (all != 0)	{		//	reach the people before the removed people		for (int i = 1; i <= step - 1; ++i)		{			nextListNode = nextListNode->nextPtr;		}		//	delete the listnode		ListNode* removedPtr = nextListNode->nextPtr;			nextListNode->nextPtr = removedPtr->nextPtr;		cout << removedPtr->data << endl;		delete removedPtr;		all--;	}}int main(int argc, char const *argv[]){	int n, s, m;	cin >> n >> s >> m;	Josephus jos(n, s, m);	return 0;}